<?xml version="1.0"?>

<!--suppress XmlHighlighting -->
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<module name="Checker">
  <property name="charset" value="UTF-8"/>

  <property name="severity" value="warning"/>
  <module name="FileLength">
    <property name="max" value="1000"/>
  </module>
  <module name="FileTabCharacter">
    <property name="eachLine" value="true"/>
  </module>
  <!--<module name="NewlineAtEndOfFile"/>-->
  <module name="SuppressWarningsFilter"/>

  <module name="UniqueProperties">
    <property name="fileExtensions" value="properties"/>
  </module>

  <module name="SuppressionFilter">
    <property name="file" value="${suppressionFile}" default="./suppressions.xml"/>
  </module>

  <module name="SuppressWithPlainTextCommentFilter">
    <property name="offCommentFormat" value="BEGIN_(GENERATED_CODE|TECH_DEBT|EXTERNAL_CODE)"/>
    <property name="onCommentFormat" value="END_(GENERATED_CODE|TECH_DEBT)"/>
  </module>

  <module name="LineLength">
    <property name="max" value="150"/>
    <property name="ignorePattern" value="^package.*|^import.*"/>
  </module>

  <module name="TreeWalker">
    <module name="AbbreviationAsWordInName">
      <property name="ignoreFinal" value="false"/>
      <property name="allowedAbbreviationLength" value="1"/>
      <property name="allowedAbbreviations" value="UI"/>
    </module>
    <!--<module name="AbstractClassName"/>-->
    <module name="AnnotationLocation">
      <property name="allowSamelineMultipleAnnotations" value="true"/>
      <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
      <property name="allowSamelineParameterizedAnnotation" value="false"/>
    </module>
    <module name="AnnotationUseStyle"/>
    <module name="AnonInnerLength">
      <property name="max" value="60"/>
    </module>
    <!--module name="ArrayTrailingComma"/-->
    <module name="ArrayTypeStyle"/>
    <module name="AtclauseOrder">
      <property name="tagOrder" value="@param,
        @return, @throws, @exception, @author, @version,@see, @since, @serial,
        @serialField, @serialData, @deprecated"/>
      <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
        METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
    </module>
    <module name="AvoidEscapedUnicodeCharacters"/>
    <!--module name="AvoidInlineConditionals"/-->
    <module name="AvoidNestedBlocks"/>
    <module name="AvoidStarImport">
      <property name="excludes" value="org.junit"/>
      <property name="allowClassImports" value="false"/>
      <property name="allowStaticMemberImports" value="false"/>
    </module>
    <module name="AvoidStaticImport">
      <property name="excludes" value="org.junit"/>
    </module>
    <module name="BooleanExpressionComplexity">
      <property name="max" value="5"/>
    </module>
    <!--<module name="CatchParameterName">-->
    <!--<property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>-->
    <!--<message key="name.invalidPattern"-->
    <!--value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>-->
    <!--</module>-->
    <module name="ClassDataAbstractionCoupling">
      <property name="max" value="10"/>
      <property name="excludedClasses" value="boolean, byte, char, double, float, int,
				long, short, void, Boolean, Byte, Character, Double, Float, Integer, Long,
				Short, Void, Object, Class, String, StringBuffer, StringBuilder,
				ArrayIndexOutOfBoundsException, Exception, RuntimeException, IllegalArgumentException,
				IllegalStateException, IndexOutOfBoundsException, NullPointerException, Throwable,
				SecurityException, UnsupportedOperationException, List, ArrayList, Deque, Queue,
				LinkedList, Set, HashSet, SortedSet, TreeSet, Map, HashMap, SortedMap, TreeMap,
                ModelObjectSaveException, ModelObjectDeleteException, ModelObjectDeltaException, "/>
    </module>
    <module name="ClassTypeParameterName"/>
    <!--module name="ClassTypeParameterName">
                <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
                <message key="name.invalidPattern"
                 value="Class type name ''{0}'' must match pattern ''{1}''."/>
            </module-->
    <!--module name="CommentsIndentation"/-->
    <module name="ConstantName">
      <property name="format" value="^logger?|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
    </module>
    <!--module name="CovariantEquals"/-->
    <!--module name="CustomImportOrder">
        <property name="sortImportsInGroupAlphabetically" value="true"/>
        <property name="separateLineBetweenGroups" value="true"/>
        <property name="customImportOrderRules" value="STANDARD_JAVA_PACKAGE###STATIC"/>
    </module-->
    <module name="CyclomaticComplexity">
      <property name="max" value="15"/>
      <property name="switchBlockAsSingleDecisionPoint" value="true"/>
    </module>
    <module name="DeclarationOrder">
      <property name="ignoreConstructors" value="false"/>
      <property name="ignoreModifiers" value="false"/>
    </module>
    <module name="DefaultComesLast"/>
    <!--module name="DescendantToken"-->
    <!--module name="DesignForExtension"/-->
    <module name="EmptyBlock">
      <property name="option" value="TEXT"/>
    </module>
    <!-- TODO Picard put back in once fixed in future checkstyle release-->
    <!--<module name="EmptyCatchBlock"/>-->
    <module name="EmptyForInitializerPad"/>
    <module name="EmptyForIteratorPad"/>
    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true"/>
      <property name="allowMultipleEmptyLines" value="false"/>
      <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
    </module>
    <module name="EmptyStatement"/>
    <!--module name="EqualsAvoidNull"/-->
    <module name="EqualsHashCode"/>
    <module name="ExecutableStatementCount">
      <property name="max" value="50"/>
    </module>
    <!--module name="ExplicitInitialization"/-->
    <module name="FallThrough"/>
    <module name="FinalClass"/>
    <!--module name="FinalLocalVariable"/-->
    <module name="FinalParameters"/>
    <module name="GenericWhitespace">
      <message key="ws.followed"
          value="GenericWhitespace ''{0}'' is followed by whitespace."/>
      <message key="ws.preceded"
          value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
      <message key="ws.illegalFollow"
          value="GenericWhitespace ''{0}'' should followed by whitespace."/>
      <message key="ws.notPreceded"
          value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
    </module>
    <!--module name="Header"/-->
    <module name="HiddenField">
      <property name="ignoreFormat" value="^add(All)*$"/>
      <property name="ignoreConstructorParameter" value="true"/>
      <property name="ignoreSetter" value="true"/>
      <property name="setterCanReturnItsClass" value="true"/>
    </module>
    <module name="HideUtilityClassConstructor"/>
    <module name="IllegalCatch"/>
    <!--module name="IllegalImport"/-->
    <!--module name="IllegalInstantiation"/-->
    <module name="IllegalThrows">
      <property name="illegalClassNames" value="java.lang.Throwable, java.lang.Error,
				java.lang.RuntimeException, java.lang.NullPointerException"/>
    </module>
    <!--module name="IllegalToken"-->
    <module name="IllegalTokenText">
      <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
      <property name="format"
          value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
      <property name="message"
          value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
    </module>
    <!--module name="IllegalType"-->
    <!--module name="ImportControl"-->
    <module name="ImportOrder">
      <property name="separatedStaticGroups" value="true"/>
      <property name="sortStaticImportsAlphabetically" value="true"/>
      <property name="option" value="bottom"/>
    </module>
    <module name="Indentation">
      <property name="basicOffset" value="4"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="4"/>
      <property name="throwsIndent" value="8"/>
      <property name="lineWrappingIndentation" value="8"/>
      <property name="arrayInitIndent" value="4"/>
    </module>
    <module name="InnerAssignment"/>
    <module name="InnerTypeLast"/>
    <module name="InterfaceIsType"/>
    <module name="InterfaceTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern"
          value="Interface type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="JavadocMethod">
      <property name="allowMissingParamTags" value="false"/>
      <property name="allowMissingReturnTag" value="false"/>
    </module>
    <module name="JavadocParagraph"/>
    <!--module name="JavadocStyle"/-->
    <module name="JavadocTagContinuationIndentation"/>
    <module name="JavadocType">
      <property name="scope" value="public"/>
    </module>
    <!--module name="JavadocVariable"/-->
    <!--module name="JavaNCSS"/-->
    <module name="LeftCurly"/>
    <!--module name="LocalFinalVariableName"/-->
    <module name="LocalVariableName">
      <property name="tokens" value="VARIABLE_DEF"/>
      <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
      <message key="name.invalidPattern"
          value="Local variable name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!--module name="MagicNumber"-->
      <!--property name="ignoreHashCodeMethod" value="true"/-->
    <!--/module-->
    <module name="MemberName"/>
    <module name="MethodCount">
      <property name="maxTotal" value="50"/>
    </module>
    <module name="MethodLength">
      <property name="tokens" value="METHOD_DEF"/>
      <property name="max" value="100"/>
    </module>
    <module name="MethodName">
      <property name="format" value="^([a-z0-9_]+[A-Z]{0,1})+$"/>
      <message key="name.invalidPattern"
          value="Method name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="MethodParamPad"/>
    <module name="MethodTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern"
          value="Method type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!--module name="MissingCtor"/-->
    <module name="MissingDeprecated"/>
    <module name="MissingOverride"/>
    <module name="MissingSwitchDefault"/>
    <module name="ModifiedControlVariable"/>
    <module name="ModifierOrder"/>
    <!--module name="MultipleStringLiterals"/-->
    <module name="MultipleVariableDeclarations"/>
    <!--module name="MutableException"/-->
    <module name="NeedBraces"/>
    <module name="NestedForDepth">
      <property name="max" value="2"/>
    </module>
    <module name="NestedIfDepth">
      <property name="max" value="2"/>
    </module>
    <module name="NestedTryDepth">
      <property name="max" value="2"/>
    </module>
    <module name="NoClone"/>
    <module name="NoFinalizer"/>
    <module name="NoLineWrap"/>
    <module name="NonEmptyAtclauseDescription"/>
    <module name="NoWhitespaceAfter"/>
    <module name="NoWhitespaceBefore"/>
    <module name="NPathComplexity">
      <property name="max" value="300"/>
    </module>
    <module name="OneStatementPerLine"/>
    <module name="OneTopLevelClass"/>
    <module name="OperatorWrap"/>
    <module name="OuterTypeFilename"/>
    <!--module name="OuterTypeNumber"/-->
    <module name="OverloadMethodsDeclarationOrder"/>
    <module name="PackageAnnotation"/>
    <module name="PackageDeclaration"/>
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
      <message key="name.invalidPattern"
          value="Package name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="ParameterAssignment"/>
    <module name="ParameterName">
      <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
      <message key="name.invalidPattern"
          value="Parameter name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="ParameterNumber">
      <property name="max" value="5"/>
    </module>
    <module name="ParenPad"/>
    <module name="RedundantImport"/>
    <module name="RedundantModifier"/>
    <module name="Regexp">
      <property name="format" value="System\.out\.print"/>
      <property name="illegalPattern" value="true"/>
    </module>
    <!--module name="RegexpHeader"/-->
    <!--module name="RegexpMultiline"-->
    <!--module name="RegexpOnFilename"/-->
    <!--module name="RegexpSingleline"-->
    <!--module name="RegexpSinglelineJava"-->
    <!--module name="RequireThis"/-->
    <module name="ReturnCount">
      <property name="max" value="3"/>
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlySame"/>
      <property name="tokens"
          value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlyAlone"/>
      <property name="option" value="alone"/>
      <property name="tokens"
          value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
    </module>
    <!--module name="SeparatorWrap"/-->
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="SingleLineJavadoc"/>
    <module name="SingleSpaceSeparator"/>
    <module name="StaticVariableName"/>
    <module name="StringLiteralEquality"/>
    <module name="SummaryJavadocCheck"/>
    <!--module name="SuperClone"/-->
    <!--module name="SuperFinalize"/-->
    <module name="SuppressWarningsHolder"/>
    <module name="ThrowsCount">
      <property name="max" value="4"/>
    </module>
    <!--module name="TodoComment"/-->
    <module name="TrailingComment"/>
    <!--module name="Translation"-->
    <module name="TypecastParenPad"/>
    <module name="TypeName">
      <message key="name.invalidPattern"
          value="Type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="UncommentedMain"/>
    <module name="UnnecessaryParentheses"/>
    <module name="UnusedImports"/>
    <module name="UpperEll"/>
    <!--module name="VariableDeclarationUsageDistance"/-->
    <!--module name="VisibilityModifier"/-->
    <!--module name="WhitespaceAfter"-->
    <module name="WhitespaceAround">
      <property name="allowEmptyConstructors" value="true"/>
      <property name="allowEmptyMethods" value="true"/>
      <property name="allowEmptyTypes" value="true"/>
      <property name="allowEmptyLoops" value="true"/>
      <message key="ws.notFollowed"
          value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
      <message key="ws.notPreceded"
          value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
    </module>
    <!--module name="WriteTag"-->

  </module>
</module>
